/* AI-generated: from design attached_login_mobile_design */
@import '../styles/tokens.css';

/* Mobile-first: design for 375px width */
.page {
	width: 100%;
	max-width: 375px;
	margin: 0 auto;
	background: var(--color-bg);
	min-height: 100vh;
	display: flex;
	flex-direction: column;
	gap: var(--space-4);
	/* create a stacking context where header and bottom nav are outside the scrollable content */
	align-self: stretch;
	/* fill the root container (override root centering) */
	padding: 0;
	/* we'll handle internal padding on the scrollable content */
}

/* Top bar */
.topbar {
	display: flex;
	align-items: center;
	gap: var(--space-3);
	justify-content: space-between;
}

.iconBtn {
	background: transparent;
	border: none;
	color: var(--color-accent);
	padding: calc(var(--touch-min) / 6);
	min-width: var(--touch-min);
	min-height: var(--touch-min);
	display: inline-flex;
	align-items: center;
	justify-content: center;
}

.iconBtn:focus-visible {
	outline: 3px solid color-mix(in srgb, var(--color-accent) 20%, transparent);
	outline-offset: 2px
}

.titleWrap {
	flex: 1 1 auto;
}

.title {
	font-size: var(--heading-2);
	color: var(--color-accent);
	margin: 0;
	line-height: 1;
}

.subtitle {
	margin: 2px 0 0 0;
	color: var(--color-text-soft);
	font-size: var(--text-sm);
}

.titleSection {
	padding: 0 var(--space-2);
}

/* Hero header (blue rounded area) */
.hero {
	display: grid;
	grid-template-columns: min-content 1fr min-content;
	align-items: center;
	background: var(--color-primary);
	color: var(--color-primary-contrast);
	/* compact mobile header: small vertical padding and full-bleed horizontally */
	padding: var(--space-2) var(--space-4);
	border-radius: 0 0 12px 12px;
	margin-left: calc(var(--space-4) * -1);
	margin-right: calc(var(--space-4) * -1);
	width: calc(100% + (var(--space-4) * 2));
	min-height: calc(var(--touch-min) + 4px);
	/* keep touch area comfortable */
}

.heroTitle {
	display: flex;
	flex-direction: column;
	align-items: center;
	gap: 2px;
	justify-self: center;
}

.hero .title {
	color: var(--color-primary-contrast);
	font-size: var(--text-lg);
	font-weight: 600;
	margin: 0;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

.hero .subtitle {
	color: color-mix(in srgb, var(--color-primary-contrast) 85%, transparent);
	font-size: var(--text-sm);
}

.hero .iconBtn {
	color: var(--color-primary-contrast);
}

/* visual avatar size inside compact header (keep clickable area via .iconBtn) */
.hero .avatar {
	width: 20px;
	height: 20px;
	border: 2px solid rgba(255, 255, 255, 0.9);
	border-radius: 999px;
	object-fit: cover;
	display: block;
}

.avatar {
	width: 20px;
	height: 20px;
	border-radius: 999px;
	object-fit: cover;
}

/* ensure clickable area remains large for touch by wrapping icon/avatars with padding in markup or using the button's min size */

/* Controls */
.controls {
	display: flex;
	flex-direction: column;
	gap: var(--space-1);
}

/* Scrollable content wrapper: fills available space between header and bottom nav */
.content {
	/* take remaining vertical space */
	flex: 1 1 auto;
	overflow-y: auto;
	/* use 8px padding as requested (tokens: var(--space-2) ~ 8px) */
	padding: var(--space-2);
	padding-bottom: calc(var(--space-2) + 56px);
	/* ensure content isn't hidden under bottom nav */
	display: flex;
	flex-direction: column;
	gap: var(--space-1);
}

.row {
	display: flex;
	gap: var(--space-1);
	align-items: stretch;
	width: 100%;
}

/* Ensure ModeSelector stretches to fill available space in .row */
.modeSelectorWrap {
	flex: 1 1 0;
	display: flex;
	align-items: center;
}

/* Search input shared style */
.searchInput {
	background: var(--color-surface);
	border: 1px solid var(--color-border);
	padding: 6px 8px;
	border-radius: 10px;
	/* rounded edges */
	min-height: 36px;
	font-size: var(--text-sm);
	color: var(--color-text);
	outline: none;
	box-sizing: border-box;
	/* allow inputs to shrink and share available space */
	flex: 1 1 0;
}

.searchInput:focus {
	box-shadow: 0 0 0 3px color-mix(in srgb, var(--color-accent) 12%, transparent);
}

.radioLabel {
	display: inline-flex;
	align-items: center;
	gap: 8px;
	font-size: var(--text-sm);
	color: var(--color-text-soft);
}

.chips {
	display: flex;
	gap: var(--space-2);
}

.chip {
	background: var(--color-surface);
	border: 1px solid var(--color-border);
	padding: 8px 12px;
	border-radius: 999px;
	font-size: var(--text-sm);
	min-height: var(--touch-min);
	display: inline-flex;
	align-items: center;
	gap: 8px;
}

.chip:focus-visible {
	outline: 3px solid color-mix(in srgb, var(--color-accent) 18%, transparent);
}

.selectLabel {
	margin-left: 0;
}

.select {
	background: var(--color-surface);
	border: 1px solid var(--color-border);
	padding: 8px 10px;
	border-radius: 12px;
	min-height: var(--touch-min);
	font-size: var(--text-sm);
	flex: 0 0 auto;
}

/* Make the label + select align nicely and keep overall row on one line */
.selectLabel {
	display: inline-flex;
	align-items: center;
	gap: 8px;
}

/* On small widths ensure layout doesn't wrap; inputs will shrink before wrapping */
.row {
	flex-wrap: nowrap;
}

/* Compact variant: tighter spacing and smaller controls to fit three items */
.compactRow {
	gap: 8px;
	align-items: center;
}

/* make inputs smaller and bounded so three controls are visible */
.compactRow {
	--gap: 8px;
	display: flex;
	gap: var(--gap);
	align-items: center;
}

/* Give each of the three controls an equal share of the row (subtract two gaps) */
.compactRow>* {
	flex: 0 0 calc((100% - (var(--gap) * 2)) / 3);
	box-sizing: border-box;
	min-width: 64px;
	/* avoid collapsing on very small screens */
}

/* TextSearch wrapper (the class passed from JSX) */
.searchInput {
	position: relative;
	display: inline-flex;
	align-items: center;
	background: var(--color-surface);
	border: 1px solid var(--color-border);
	border-radius: 12px;
	height: 40px;
	padding-right: 8px;
	box-sizing: border-box;
}

/* search icon inside the wrapper, absolutely positioned */
.searchInput .searchIcon {
	position: absolute;
	left: 10px;
	top: 50%;
	transform: translateY(-50%);
	display: inline-flex;
	align-items: center;
	justify-content: center;
	color: var(--color-text-soft);
	pointer-events: none;
}

/* target the input element inside the module-scoped wrapper so CSS modules don't break selectors */
.searchInput input {
	width: 100%;
	border: none;
	outline: none;
	background: transparent;
	/* keep the icon room and add 2px inset for text */
	padding-left: 2px;
	padding-right: 2px;
	font-size: 14px;
	box-sizing: border-box;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
	/* show ellipsis when content overflows */
	-webkit-appearance: none;
	appearance: none;
	box-shadow: none;
}

/* On focus allow caret and scrolling (visual ellipsis removed) */
.searchInput input:focus {
	text-overflow: clip;
	/* allow natural scrolling while focused */
}

/* focus ring applied to wrapper for accessible outline */
.searchInput:focus-within {
	box-shadow: 0 0 0 4px color-mix(in srgb, var(--color-accent) 10%, transparent);
	border-color: color-mix(in srgb, var(--color-accent) 40%, var(--color-border));
}

/* Select should visually match inputs */
.compactRow select,
.compactRow .select {
	width: 100%;
	height: 40px;
	border-radius: 12px;
	border: 1px solid var(--color-border);
	background: var(--color-surface);
	padding: 6px 10px;
	box-sizing: border-box;
	font-size: 14px;
}

/* make the inline svg wrapper align with input height */
.compactRow span[aria-hidden] {
	display: inline-flex;
	align-items: center;
	color: var(--color-text-soft);
}

/* Map */
.mapSection {
	/* allow the map section to grow and fill remaining vertical space inside .content */
	flex: 1 1 auto;
	display: flex;
	flex-direction: column;
	border-radius: var(--radius-lg);
	overflow: hidden;
	box-shadow: var(--shadow-card);
	min-height: 300px;
	/* fallback on very small screens */
}

.mapWrapper {
	width: 100%;
	height: 100%;
	display: block;
	border-radius: var(--radius-lg);
	overflow: hidden;
	/* ensure wrapper expands to fill the flex container */
	flex: 1 1 auto;
}

.map {
	width: 100%;
	height: 100%;
	display: block;
	border: 0;
}

/* Map overlay: position the small search control over the top-left of the map */
.mapOverlay {
	position: absolute;
	top: 12px;
	left: 12px;
	right: 12px;
	/* allow some responsiveness on narrow screens */
	pointer-events: none;
	/* allow clicks to pass through except the control itself */
	/* ensure the overlay group can be stacked above the map click-catcher when needed */
	z-index: 6;
}

.mapSearch {
	pointer-events: auto;
	/* enable interaction with the search control */
	max-width: 420px;
	/* keep the search control in its own stacking context above the map overlay */
	position: relative;
	z-index: 7;
}

/* Transparent overlay placed over the embedded map to capture clicks for the prototype.
   It sits above the iframe but below any mapOverlay controls (z-index ordering). */
.mapClickOverlay {
	position: absolute;
	inset: 0;
	/* cover the entire map container */
	z-index: 3;
	background: transparent;
	cursor: pointer;
	/* allow pointer events so clicks are captured */
	pointer-events: auto;
}

/* Results list */
.results {
	display: flex;
	flex-direction: column;
	gap: var(--space-3);
}

.resultsHeading {
	font-size: var(--text-md);
	color: var(--color-accent);
	margin: 0;
	padding: var(--space-2) 0;
}

.card {
	display: flex;
	gap: var(--space-3);
	background: var(--color-surface);
	border-radius: var(--radius-md);
	padding: var(--space-3);
	align-items: center;
	box-shadow: var(--shadow-card);
}

.cardMedia img {
	width: 80px;
	height: 60px;
	object-fit: cover;
	border-radius: 8px;
}

.cardBody {
	flex: 1 1 auto;
}

.cardTitle {
	font-size: var(--text-md);
	margin: 0 0 6px 0;
	color: var(--color-accent);
}

.cardMeta {
	margin: 0;
	font-size: var(--text-sm);
	color: var(--color-text-soft);
}

.cardFooter {
	display: flex;
	align-items: center;
	gap: var(--space-3);
	margin-top: var(--space-2);
}

.spaceLabel {
	font-size: var(--text-sm);
	color: var(--color-text);
}

.detailsBtn {
	background: var(--color-primary);
	color: var(--color-primary-contrast);
	border: none;
	padding: 8px 12px;
	border-radius: 999px;
	min-height: var(--touch-min);
}

.detailsBtn:focus-visible {
	outline: 3px solid color-mix(in srgb, var(--color-primary) 18%, transparent);
}

.distance {
	font-weight: 700;
	color: var(--color-accent);
	margin-left: 8px;
}

/* Bottom navigation - fixed */
.bottomNav {
	position: fixed;
	left: 0;
	right: 0;
	bottom: 0;
	height: 56px;
	display: flex;
	gap: 0;
	background: var(--color-primary);
	align-items: center;
	justify-content: space-around;
	padding: 0 var(--space-4);
}

.navBtn {
	background: transparent;
	color: var(--color-primary-contrast);
	border: none;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	gap: 4px;
	min-width: 56px;
	min-height: 44px;
}

.navBtn:focus-visible {
	outline: 3px solid color-mix(in srgb, var(--color-primary-contrast) 20%, transparent);
}

.navLabel {
	font-size: var(--text-xs);
}

/* Prevent horizontal scroll */
html,
body,
#root {
	overflow-x: hidden;
}

/* Larger screens: keep centered content */
@media (min-width: 480px) {
	.page {
		padding-left: calc((100% - 375px)/2);
		padding-right: calc((100% - 375px)/2);
	}
}

.backButton {
	background: #e3e6f5;
	color: #2d3a8c;
	border: none;
	border-radius: 6px;
	padding: 8px 8px;
	font-size: 1rem;
	font-weight: 500;
	cursor: pointer;
	transition: background 0.2s;
	text-align: left;
	width: 50%;
}

.backButton:hover {
	background: #d1d8f6;
}